name: Build, test and publish image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: asia-southeast1-docker.pkg.dev
  REPOSITORY: tkuchhal/containers
  IMAGE_NAME: template
  GITHUB_BUILD_REPO: https://github.com/tkuchhal/build.git
  DEPLOYMENT_FILE_PATH: modules/kubernetes-deployment/template/deployment.yaml


jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate Docker with GCP
        run: |
          gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  test:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate Docker with GCP
        run: |
          gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

      - name: Run tests
        run: |
          docker run -d --name test-container -v ${{ github.workspace }}:/app ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker exec test-container pytest tests/ --junitxml=/app/pytest_report.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ${{ github.workspace }}/pytest_report.xml
  #
  #
  #  deploy-dev:
  #    needs: test
  #    runs-on: ubuntu-latest
  #    permissions: write-all
  #
  #    steps:
  #      - name: Authenticate with GCP
  #        uses: google-github-actions/auth@v2
  #        with:
  #          credentials_json: ${{ secrets.GCP_SA_KEY }}
  #
  #      - name: Authenticate Docker with GCP
  #        run: |
  #          gcloud --quiet auth configure-docker ${{ env.REGISTRY }}
  #
  #      - name: Set up Cloud SDK
  #        uses: google-github-actions/setup-gcloud@v2
  #        with:
  #          project_id: ${{ vars.GKE_PROJECT }}
  #
  #      - name: Connect to Kubernetes cluster
  #        uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
  #        with:
  #          project_id: ${{ vars.GKE_PROJECT }}
  #          cluster_name: ${{ vars.DEV_CLUSTER_NAME }}
  #          location: ${{ vars.GKE_LOCATION }}


  update-dev-deployment-file:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout the repository containing the deployment file
        uses: actions/checkout@v3
        with:
          repository: ${{ env.GITHUB_BUILD_REPO }}
          ref: main
          token: ${{ secrets.BUILD_GIT_REPO_TOKEN }}
          path: 'build-repo'


      - name: Install yq
        run: |
          sudo snap install yq

      - name: Update the deployment YAML file using yq
        run: |
          FILE_PATH=${{ env.DEPLOYMENT_FILE_PATH }}
          NEW_IMAGE="${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          yq e -i ".spec.template.spec.containers[0].image = \"$NEW_IMAGE\"" $FILE_PATH

      - name: Commit and push the changes
        run: |
          cd build-repo
          git config user.name cicd-user
          git config user.email cicd-user@github.com
          git add ${{ env.DEPLOYMENT_FILE_PATH }}
          git commit -m "Update deployment image to ${{ github.sha }}"
          git push
