version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.0
  deploy-orb: tkuchh/deploy-orb@0.0.8

commands:
  deploy:
    parameters:
      container_repo:
        type: string
        default: gcr.io/testing-234907
      deployment_name:
        type: string
      image_name:
        type: string
      image_tag:
        type: string
      github_access_token:
        type: string
        default: $GITHUB_PAT
      config_path:
        type: string
      kubectl_filename:
        type: string
    steps:
      - run: 
          name: Initializing deployment
          command: |
            echo "Running deployment with these inputs:"
            echo "container_repo:<<parameters.container_repo>>"
            echo "deployment_name:<<parameters.deployment_name>>"
            echo "image_name:<<parameters.image_name>>"
            export image_tag=<<parameters.image_tag>>
            echo "image_tag:$image_tag"
            echo "config_path:<<parameters.config_path>>"
            echo "kubectl_filename:<<parameters.kubectl_filename>>"
      - run:
          name: Initialize git repo for build files
          command: |
            git clone https://workflowr:<<parameters.github_access_token>>@github.com/tkuchh/build.git ~/build
            cd ~/build
            git config user.email "cicdrunner@template.com"
            git config user.name "CI/CD"
      - run:
          name: Updating build config with new image details
          command: |
            cd ~/build/<<parameters.config_path>>
            [ -f "./<<parameters.kubectl_filename>>" ] && echo "Deployment config found" || { echo "Error: deployment config file not found: <<parameters.kubectl_filename>>." >&2; exit 1; }
            sed -i "s|image: .*/<<parameters.image_name>>:.*|image: <<parameters.container_repo>>/<<parameters.image_name>>:${image_tag}|" ./<<parameters.kubectl_filename>>
            cat ./<<parameters.kubectl_filename>>
            echo "<<parameters.image_tag>>"
            grep -q "<<parameters.container_repo>>/<<parameters.image_name>>:$image_tag" ./<<parameters.kubectl_filename>> || { echo "Error: Unable to add new image name to deployment file" >&2; exit 1; }
      - run:
          name: Fetch previous image label
          command: |
            export previous_image=$(kubectl get deployment <<parameters.deployment_name>> -o=jsonpath='{$.metadata.annotations.previous_image}')
            echo "previous_image=$previous_image"
      - run:
          name: Deploy to GKE
          command: kubectl apply -f ~/build/<<parameters.config_path>>/<<parameters.kubectl_filename>>
      - run:
          name: Fetch new image label
          command: 
            export current_image=<<parameters.container_repo>>/<<parameters.image_name>>:$image_tag
            echo "current_image=$current_image"
      - run:
          name: Record image version in case of rollback
          command: |
            kubectl annotate --overwrite deployment <<parameters.deployment_name>> \
            current-image="$current_image" \
            previous-image="$previous_image" \
            update-time="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      - run:
          name: Push the new version to git
          command: |
            cd ~/build
            git add ./<<parameters.config_path>>
            git commit -m "Update image tag to new-tag"
            git push origin main

  rollback:
    parameters:
      deployment_name:
        type: string
      image_name:
        type: string
      kubectl_filename:
        type: string
      config_path:
        type: string
      github_access_token:
        type: string
        default: $GITHUB_PAT
      container_repo:
        type: string
        default: gcr.io/testing-234907
    steps:
      - run:
          name: Fetch previous image label
          command: export previous_image=$(kubectl get deployment <<parameters.deployment_name>> -o=jsonpath='{$.metadata.annotations.previous_image}')
      - run:
          name: Fetch latest build config
          command: |
            git clone https://workflowr:<<parameters.github_access_token>>@github.com/tkuchh/build.git ~/build
            cd ~/build
            git config user.email "cicdrunner@template.com"
            git config user.name "CI/CD"
            cd ~/build/<<parameters.config_path>>
            sed -i "s|image:\(.*\)/<<parameters.image_name>>:.*|image: $previous_image |" ./<<parameters.kubectl_filename>>
      - run:
          name: Deploy to GKE
          command: kubectl apply -f ~/build/<<parameters.config_path>>/<<parameters.kubectl_filename>>
      - run:
          name: Fetch new image label
          command: export current_image=$previous_image
      - run:
          name: Record image version in case of rollback
          command: |
            kubectl annotate --overwrite deployment <<parameters.deployment_name>> \
            current-image="$current_image" \
            update-time="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      - run:
          name: Push the new version to git
          command: |
            cd ~/build
            git add ./<<parameters.config_path>>
            git commit -m "Reverted deployed image"
            git push origin main

jobs:
  build-and-test:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - deploy-orb/connect_to_container_repo
      - run:
          name: Build Docker Image
          command: |
            docker build -t gcr.io/testing-234907/template:$CIRCLE_SHA1 -t gcr.io/testing-234907/template:$CIRCLE_BUILD_NUM -t gcr.io/testing-234907/template:latest .
      - run:
          name: Export Environment Variables
          command: |
            env > env_vars
            echo "CONFIGMAP_VARIABLE=success" >> env_vars
            echo "SECRETS_VARIABLE=success" >> env_vars
      - run:
          name: Run Tests in Docker Image
          command: |
            docker run --env-file env_vars gcr.io/testing-234907/template:$CIRCLE_SHA1 pytest /code/tests/
      - run:
          name: Push Docker Image to Container Registry
          command: |
            docker push gcr.io/testing-234907/template:$CIRCLE_SHA1
            docker push gcr.io/testing-234907/template:$CIRCLE_BUILD_NUM
            docker push gcr.io/testing-234907/template:latest


  deploy-dev:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: dev-cluster
      - deploy:
          config_path: services/template/development
          kubectl_filename: deployment.yaml
          image_name: template
          image_tag: $CIRCLE_SHA1
          deployment_name: template

  deploy-prod-canary:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - deploy:
          config_path: services/template/production
          kubectl_filename: deployment-canary.yaml
          image_name: template-canary
          image_tag: $CIRCLE_SHA1
          deployment_name: template-canary

  rollback-prod-canary:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - rollback:
          config_path: services/template/production
          kubectl_filename: deployment-canary.yaml
          image_name: template-canary
          deployment_name: template-canary

  split-traffic-90-10:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  split-traffic-70-30:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  split-traffic-30-70:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  full-deployment:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - deploy:
          config_path: services/template/production
          kubectl_filename: deployment.yaml
          image_name: template
          image_tag: $CIRCLE_SHA1
          deployment_name: template

  rollback-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - rollback:
          config_path: services/template/production
          kubectl_filename: deployment.yaml
          image_name: template
          deployment_name: template
      - rollback:
          config_path: services/template/production
          kubectl_filename: deployment-canary.yaml
          image_name: template-canary
          deployment_name: template-canary

workflows:
  version: 2
  build-test-release:
    jobs:
      - build-and-test:
          context: gcp_credentials
          filters:
            branches:
              only: main
      - deploy-dev:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      - confirm-deploy-prod-canary:
          type: approval
          requires:
            - deploy-dev

      - deploy-prod-canary:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-deploy-prod-canary
          filters:
            branches:
              only: main

      - confirm-rollback-canary:
          type: approval
          requires:
            - deploy-prod-canary

      - rollback-prod-canary:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-rollback-canary
          filters:
            branches:
              only: main

      - confirm-90-10-split:
          type: approval
          requires:
            - deploy-prod-canary

      - split-traffic-90-10:
          requires:
            - confirm-90-10-split

      - confirm-70-30-split:
          type: approval
          requires:
            - split-traffic-90-10

      - split-traffic-70-30:
          type: approval
          requires:
            - confirm-70-30-split

      - confirm-30-70-split:
          type: approval
          requires:
            - split-traffic-70-30

      - split-traffic-30-70:
          type: approval
          requires:
            - confirm-30-70-split

      - confirm-full-deployment:
          type: approval
          requires:
            - split-traffic-30-70

      - full-deployment:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-full-deployment
          filters:
            branches:
              only: main


      - confirm-rollback-prod:
          type: approval
          requires:
            - full-deployment


      - rollback-prod:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-rollback-prod
          filters:
            branches:
              only: main