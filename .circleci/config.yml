version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.0
  deploy-orb: tkuchh/deploy-orb@0.0.8

commands:
  deploy:
    parameters:
      container_repo:
        type: string
        default: gcr.io/testing-234907
      deployment_name:
        type: string
      image_name:
        type: string
      image_tag:
        type: string
      github_access_token:
        type: string
        default: $GITHUB_PAT
      config_path:
        type: string
      config_file:
        type: string
      enable_rollback:
        type: boolean
        default: true # Set to fall if you are already performing a rollback
    steps:
      - run: 
          name: Initializing deployment
          command: |
            echo 'export container_repo=<<parameters.container_repo>>' >> $BASH_ENV
            echo 'export deployment_name=<<parameters.deployment_name>>' >> $BASH_ENV
            echo 'export image_name=<<parameters.image_name>>' >> $BASH_ENV
            echo 'export image_tag=<<parameters.image_tag>>' >> $BASH_ENV
            echo 'export config_path=<<parameters.config_path>>' >> $BASH_ENV
            echo 'export config_file=<<parameters.config_file>>' >> $BASH_ENV

            echo "Running deployment with these inputs:"
            echo "container_repo:<<parameters.container_repo>>"
            echo "deployment_name:<<parameters.deployment_name>>"
            echo "image_name:<<parameters.image_name>>"
            echo "image_tag:<<parameters.image_tag>>"
            echo "config_path:<<parameters.config_path>>"
            echo "config_file:<<parameters.config_file>>"

      - run:
          name: Install yq
          command: |
            sudo curl -L "https://github.com/mikefarah/yq/releases/download/v4.9.8/yq_linux_amd64" -o /usr/bin/yq
            sudo chmod +x /usr/bin/yq

      - run:
          name: Initialize git repo for build files
          command: |
            git clone https://workflowr:<<parameters.github_access_token>>@github.com/tkuchh/build.git ~/build
            cd ~/build
            git config user.email "cicdrunner@template.com"
            git config user.name "CI/CD"

      - run:
          name: Updating build config with new image details
          command: |
            cd ~/build/$config_path
            [ -f "./${config_file}" ] || { echo "Error: deployment config file not found: ${config_file}." >&2; exit 1; }
            echo "Setting target image to ${container_repo}/${image_name}:${image_tag}"
            sed -i "s|image: .*/${image_name}:.*|image: ${container_repo}/${image_name}:${image_tag}|" ${config_file}
            grep -q "${container_repo}/${image_name}:${image_tag}" ./${config_file} || { echo "Error: Unable to add new image name to deployment file" >&2; exit 1; }
            echo "Target config contents"
            echo "----------------------"
            cat ${config_file}

      - run:
          name: Deploy to GKE
          command: |
            # Check if the deployment exists
            if kubectl get deployment ${deployment_name} > /dev/null 2>&1; then
                # If deployment exists, get the previous_image based on the condition
                if [ "<<parameters.enable_rollback>>" = "true" ]; then
                    previous_image="$(kubectl get deployment ${deployment_name} -o=jsonpath='{$.metadata.annotations.current-image}')"
                else
                    previous_image="$(kubectl get deployment ${deployment_name} -o=jsonpath='{$.metadata.annotations.previous-image}')"
                fi
            else
                # If deployment does not exist, set a default value or handle accordingly
                echo "Deployment ${deployment_name} does not exist. Proceeding with a default setup."
                previous_image="${container_repo}/${image_name}:${image_tag}"
            fi
            
            echo "Deploying workload config"
            kubectl apply -f ~/build/${config_path}/${config_file}

            current_image="${container_repo}/${image_name}:${image_tag}"
            echo "Setting previous-image to $previous_image"
            echo "Setting current-image to $current_image"
            kubectl annotate --overwrite deployment $deployment_name current-image="$current_image" previous-image="$previous_image" update-time="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - run:
          name: Push the new config file (with updated image version) to git
          command: |
            cd ~/build
            git add ./$config_path/$config_file
            if git diff --cached --quiet; then
              echo "No changes to commit."
            else
              git commit -m "Deployed ${container_repo}/${image_name}:${image_tag} to ${deployment_name}"
              git push origin main
            fi

      - run:
          name: Set deployment information in Kubernetes pods
          command: |
            # Fetch the current deployment configuration
            kubectl get deployment ${deployment_name} -o yaml > deployment.yaml

            # Set DEPLOY_TIME and GIT_SHA environment variables
            DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            GIT_SHA=$CIRCLE_SHA1

            # Add the DEPLOY_TIME environment variable
            yq eval ".spec.template.spec.containers[0].env += [{name: \"DEPLOY_TIME\", value: \"$DEPLOY_TIME\"}]" -i deployment.yaml

            # Add the GIT_SHA environment variable
            yq eval ".spec.template.spec.containers[0].env += [{name: \"GIT_SHA\", value: \"$GIT_SHA\"}]" -i deployment.yaml

            # Apply the modified configuration back to the cluster
            kubectl apply -f deployment.yaml

            # Clean up
            rm deployment.yaml

  rollback:
    parameters:
      deployment_name:
        type: string
      image_name:
        type: string
      config_file:
        type: string
      config_path:
        type: string
      github_access_token:
        type: string
        default: $GITHUB_PAT
      container_repo:
        type: string
        default: gcr.io/testing-234907
    steps:
      - run:
          name: Fetching previous-image
          command: |
            previous_image_full=$(kubectl get deployment <<parameters.deployment_name>> -o=jsonpath='{$.metadata.annotations.previous-image}')
            previous_image_tag=$(echo $previous_image_full | cut -d':' -f2)
            echo "export previous_image_tag=$previous_image_tag" >> $BASH_ENV
            previous_deployment=$(kubectl get deployment <<parameters.deployment_name>> -o=jsonpath='{$.metadata.annotations.update-time}')
            echo "Reverting <<parameters.deployment_name>> to image ${previous_image_full} which was deployed on ${previous_deployment}"
      - deploy:
          config_path: <<parameters.config_path>>
          config_file: <<parameters.config_file>>
          image_name: <<parameters.image_name>>
          image_tag: $previous_image_tag
          deployment_name: <<parameters.deployment_name>>
          enable_rollback: false
          
  build:
    parameters:
      dockerfile_path:
        type: string
      image_name:
        type: string
      container_repo:
        type: string
        default: gcr.io/testing-234907
      test_runner_env_file:
        type: string
        default: ""
      test_runner_command:
        type: string
        default: ""
    steps:
      - deploy-orb/connect_to_container_repo
      - run:
          name: Build Docker Image
          command: |
            docker build -t <<parameters.container_repo>>/<<parameters.image_name>>:$CIRCLE_SHA1 -t <<parameters.container_repo>>/<<parameters.image_name>>:$CIRCLE_BUILD_NUM -t <<parameters.container_repo>>/<<parameters.image_name>>:latest .
      - run:
          name: Run Tests in Docker Image
          command: |
            if [ -n "<<parameters.test_runner_command>>" ]; then
              if [ -f "<<parameters.test_runner_env_file>>" ]; then
                env_option="--env-file <<parameters.test_runner_env_file>>"
                echo "Loading environment variables for test runner"
                cat <<parameters.test_runner_env_file>>
              else
                env_option=""
                echo "No environment variables configured for test runner"
              fi
              docker run $env_option <<parameters.container_repo>>/<<parameters.image_name>>:$CIRCLE_SHA1 <<parameters.test_runner_command>>
            else
              echo "No test run config detected"
            fi
      - run:
          name: Push Docker Image to Container Registry
          command: |
            docker push <<parameters.container_repo>>/<<parameters.image_name>>:$CIRCLE_SHA1
            docker push <<parameters.container_repo>>/<<parameters.image_name>>:$CIRCLE_BUILD_NUM
            docker push <<parameters.container_repo>>/<<parameters.image_name>>:latest

jobs:
  build-and-test:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Export Environment Variables
          command: |
            env > env_vars
            echo "CONFIGMAP_VARIABLE=success" >> env_vars
            echo "SECRETS_VARIABLE=success" >> env_vars
      - build:
          dockerfile_path: .
          image_name: template
          test_runner_env_file: ./env_vars
          test_runner_command: pytest /code/tests/

  deploy-dev:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: dev-cluster
      - deploy:
          config_path: services/template/development
          config_file: deployment.yaml
          image_name: template
          image_tag: $CIRCLE_SHA1
          deployment_name: template

  deploy-prod-canary:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - deploy:
          config_path: services/template/production
          config_file: deployment-canary.yaml
          image_name: template
          image_tag: $CIRCLE_SHA1
          deployment_name: template-canary

  rollback-prod-canary:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - rollback:
          config_path: services/template/production
          config_file: deployment-canary.yaml
          image_name: template
          deployment_name: template-canary

  split-traffic-90-10:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  split-traffic-70-30:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  split-traffic-30-70:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          command: echo "Hello, world!"

  full-deployment:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - deploy:
          config_path: services/template/production
          config_file: deployment.yaml
          image_name: template
          image_tag: $CIRCLE_SHA1
          deployment_name: template

  rollback-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - deploy-orb/connect_to_kubernetes:
          project_id: testing-234907
          cluster_name: prod-cluster
      - rollback:
          config_path: services/template/production
          config_file: deployment.yaml
          image_name: template
          deployment_name: template
      - rollback:
          config_path: services/template/production
          config_file: deployment-canary.yaml
          image_name: template
          deployment_name: template-canary

workflows:
  version: 2
  build-test-release:
    jobs:
      - build-and-test:
          context: gcp_credentials
          filters:
            branches:
              only: main
      - deploy-dev:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      - confirm-deploy-prod-canary:
          type: approval
          requires:
            - deploy-dev

      - deploy-prod-canary:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-deploy-prod-canary
          filters:
            branches:
              only: main

      - confirm-rollback-canary:
          type: approval
          requires:
            - deploy-prod-canary

      - rollback-prod-canary:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-rollback-canary
          filters:
            branches:
              only: main

      - confirm-90-10-split:
          type: approval
          requires:
            - deploy-prod-canary

      - split-traffic-90-10:
          requires:
            - confirm-90-10-split

      - confirm-70-30-split:
          type: approval
          requires:
            - split-traffic-90-10

      - split-traffic-70-30:
          requires:
            - confirm-70-30-split

      - confirm-30-70-split:
          type: approval
          requires:
            - split-traffic-70-30

      - split-traffic-30-70:
          requires:
            - confirm-30-70-split

      - confirm-full-deployment:
          type: approval
          requires:
            - split-traffic-30-70

      - full-deployment:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-full-deployment
          filters:
            branches:
              only: main


      - confirm-rollback-prod:
          type: approval
          requires:
            - full-deployment


      - rollback-prod:
          context:
            - gcp_credentials
            - build_repo_access
          requires:
            - confirm-rollback-prod
          filters:
            branches:
              only: main